{"name":"Ice cube","body":"## Get `ice_cube`\r\n\r\n``` bash\r\n# install\r\n$ gem install \r\n# get the code\r\n$ gem clone git://github.com/seejohnrun/ice_cube\r\n```\r\n\r\n## Complex Rules, Simple.\r\n\r\n``` ruby\r\n# The fridays in October that are on the 13th of the month\r\nRule.weekly.day(:friday).day_of_month(13).month_of_year(:october)\r\n```\r\n\r\n## Persistence\r\n\r\n`ice_cube` offers a hash-backed to_yaml implementation, making it super easy (and safe) to serialize schedule objects to your data store:\r\n\r\n``` ruby\r\n# YAML\r\nyaml = schedule.to_yaml\r\nschedule = Schedule.from_yaml(yaml)\r\n\r\n# Hash\r\nhash = schedule.to_hash\r\nschedule = Schedule.from_hash(hash)\r\n```\r\n\r\n## Using your words\r\n\r\n``` ruby\r\n# A complex rule\r\nrule = Rule.daily.day_of_week(:monday => [1, -1]).month_of_year(:april)\r\n\r\nrule.to_s # Daily in April on the last and 1st Mondays\r\nrule.to_ical # FREQ=DAILY;BYMONTH=4;BYDAY=-1MO,1MO\r\nrule.to_yaml # :rrules: \\n- :until: \\n :count: ...\r\n```\r\n\r\n## Combining Rules\r\n\r\nMultiple validations on the same rule, result in an AND (&&) relationship\r\n\r\n``` ruby\r\n# On Wednesdays THAT ARE ALSO in April\r\nschedule.add_recurrence_rule Rule.weekly.day(:wednesday).month_of_year(:april)\r\n```\r\n\r\nMultiple rules in the same schedule, result in an OR (||) relationship\r\n\r\n``` ruby\r\n# On Thursdays and the 100th day of the year\r\nschedule.add_recurrence_rule Rule.weekly.day(:thursday)\r\nschedule.add_recurrence_rule Rule.day_of_year(100)\r\n```\r\n\r\n## The full workflow, what's in a Schedule?\r\n\r\n``` ruby\r\n# Create a schedule for every day in May\r\nschedule = Schedule.new(Time.now)\r\nschedule.add_recurrence_rule Rule.daily.month_of_year(:may)\r\n\r\n# Does it occur at a certain time?\r\nschedule.occurs_at?(Time.local(2010, 11, 1)) # false\r\n\r\n# Does it occur on a certain date?\r\nschedule.occurs_on?(Date.today)\r\n\r\n# All of the occurrences between two Times\r\nschedule.occurrences_between(Time.local(2010, 1, 1), Time.local(2010, 12, 1))\r\n\r\n# When are the first 10 occurrences\r\nschedule.first(10) # [Thu May 13 18:01:46 -0400 2010, Fri May 13 ...]\r\n\r\n# All of the occurrences between now and another Time\r\nschedule.occurrences(Time.local(2010, 12, 1)) # [Thu May 13 18:01:46 -0400 2010]\r\n\r\n# If your schedule has a duration, occurring_at? is important\r\nten = Time.new(2010, 5, 6, 10, 0, 0)\r\nschedule = Schedule.new(ten, :duration => 3600)\r\nschedule.add_recurrence_rule Rule.daily\r\nschedule.occurring_at?(Time.local(2010, 5, 6, 10, 30, 0)) # true\r\n\r\n# If your schedule needs a hard-set end time, that's easy too\r\nschedule = Schedule.new(Time.now, :end_time => Time.now + 3600)\r\nschedule.occurs_at?(Time.now + 3601) # false\r\n```\r\n\r\n## Reference\r\n* [Introduction Slides](http://seejohnrun.github.com/ice_cube/static/ice_cube_ruby_nyc.pdf)\r\n* [Lone Star Ruby Conference Slides](http://seejohnrun.github.com/ice_cube/static/lsrc_ice_cube.pdf)","tagline":"Ruby Date Recurrence Library","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}